import os
import time
import psutil
import requests
import logging
import json
from time import sleep

logging.basicConfig(filename='/opt/tljh/history_sessions.log', level=logging.DEBUG)

url = "{{ ansible_play_hosts | join('') }}" # Домен или айпи
token = "{{ jupyter_admin_token }}" # Токен
hub_url = "http://" + url + "/hub/api"


def get_jupyter_sessions(hub_url, token):
    jupyter_not_admin_sessions = []
    for process in psutil.process_iter(['pid', 'username']):
        username = process.info["username"]
        if username.startswith("jupyter-") and not is_admin_user(username[8:], hub_url, token):
            jupyter_not_admin_sessions.append(process.info['pid'])
            return jupyter_not_admin_sessions

def is_admin_user(username, hub_url, token):
    try:
        response = requests.get(f"{hub_url}/users/{username}", headers={"Authorization": f"token {token}", })
        response.raise_for_status()
        if response.status_code == 200:
            return response.json().get("admin")
        return True
    except Exception as e:
        logging.info(f"Network error: {e}")
    return True


def load_config(file_path="/opt/tljh/config.json"):
    try:
        with open(file_path, "r") as file:
            config = json.load(file)
        return config
    except FileNotFoundError:
        print(f"Файл конфигурации {file_path} не найден.")
        return None


def save_config(config, file_path="/opt/tljh/config.json"):
    with open(file_path, "w") as file:
        json.dump(config, file, indent=2)


def get_time_outs():
    config = load_config()
    if config is None:
        # Создаем новый конфиг, если файл не найден
        config = {"time_out_user": 600, "time_out_sessions": 600}
        save_config(config)
    time_out_user = config["time_out_user"]
    time_out_sessions = config["time_out_sessions"]
    return time_out_user, time_out_sessions

def delete_sessions(time_out_sessions):
    jupyter_not_admin_sessions = get_jupyter_sessions(hub_url, token)
    if jupyter_not_admin_sessions != None:
        for session_pid in jupyter_not_admin_sessions:
            session_start_time = os.path.getctime(f'/proc/{session_pid}')
        elapsed_time = time.time() - session_start_time
        if elapsed_time > time_out_sessions:
            os.system(f"sudo kill {session_pid}")
            logging.info(f"{session_pid} disabled")

def main():
    time_out_user, time_out_sessions = get_time_outs()
    logging.info(f"time_out_user: {time_out_user}")
    logging.info(f"time_out_sessions: {time_out_sessions}") # Максимальное время сеанса в секундах

    while(True):
        delete_sessions(time_out_sessions)
        sleep(10)


if __name__ == "__main__":
    main()
